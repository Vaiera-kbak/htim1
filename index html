import numpy as np
import pandas as pd
from nupic.frameworks.opf.model_factory import ModelFactory
from nupic.encoders import MultiEncoder, ScalarEncoder, DateEncoder
from nupic.data.inference_shifter import InferenceShifter

def create_htm_model():
    """Создает и конфигурирует HTM модель"""
    model_params = {
        "model": "HTMPrediction",
        "version": 1,
        "predictAheadTime": None,
        "modelParams": {
            "inferenceType": "TemporalMultiStep",
            "sensorParams": {
                "verbosity": 0,
                "encoders": {
                    "timestamp": {
                        "fieldname": "timestamp",
                        "name": "timestamp",
                        "type": "DateEncoder",
                        "timeOfDay": (21, 9.5),
                        "dayOfWeek": (21, 1),
                    },
                    "value": {
                        "fieldname": "value",
                        "name": "value",
                        "type": "ScalarEncoder",
                        "minval": 0,
                        "maxval": 100,
                        "clipInput": True,
                        "w": 21,
                        "n": 1024,
                    }
                },
            },
            "spEnable": True,
            "spParams": {
                "spatialImp": "cpp",
                "globalInhibition": 1,
                "columnCount": 2048,
                "inputWidth": 0,
                "numActiveColumnsPerInhArea": 40,
                "seed": 1956,
                "potentialPct": 0.8,
                "synPermConnected": 0.1,
                "synPermActiveInc": 0.0001,
                "synPermInactiveDec": 0.0005,
            },
            "tmEnable": True,
            "tmParams": {
                "columnCount": 2048,
                "cellsPerColumn": 32,
                "inputWidth": 2048,
                "seed": 1960,
                "temporalImp": "cpp",
                "newSynapseCount": 20,
                "maxSynapsesPerSegment": 32,
                "maxSegmentsPerCell": 128,
                "initialPerm": 0.21,
                "permanenceInc": 0.1,
                "permanenceDec": 0.1,
                "globalDecay": 0.0,
                "maxAge": 0,
                "minThreshold": 12,
                "activationThreshold": 16,
                "outputType": "normal",
                "pamLength": 3,
            },
            "clParams": {
                "regionName": "SDRClassifierRegion",
                "clVerbosity": 0,
                "alpha": 0.0001,
                "steps": "1",
            },
        },
    }
    return ModelFactory.create(model_params)

def generate_synthetic_data(num_records=500):
    """Генерирует синтетические данные временного ряда"""
    timestamps = pd.date_range(start="2023-01-01", periods=num_records, freq="H")
    values = [50 + 30 * np.sin(i * 0.1) + 5 * np.random.randn() for i in range(num_records)]
    return pd.DataFrame({"timestamp": timestamps, "value": values})

def train_and_predict(model, data):
    """Обучает модель и делает предсказания"""
    shifter = InferenceShifter()
    predictions = []
    actuals = []
    
    for i, row in data.iterrows():
        result = model.run({
            "timestamp": row["timestamp"],
            "value": row["value"]
        })
        
        result = shifter.shift(result)
        
        prediction = result.inferences["multiStepBestPredictions"][1]
        predictions.append(prediction)
        actuals.append(row["value"])
        
        if i % 50 == 0:
            print(f"Шаг {i}: Реальное = {row['value']:.2f}, Предсказанное = {prediction:.2f}")
    
    return actuals, predictions

def calculate_metrics(actuals, predictions):
    """Вычисляет метрики качества модели"""
    actuals = np.array(actuals)
    predictions = np.array(predictions)
    mse = np.mean((actuals - predictions) ** 2)
    mae = np.mean(np.abs(actuals - predictions))
    print(f"\nМетрики качества:")
    print(f"MSE: {mse:.4f}")
    print(f"MAE: {mae:.4f}")

def main():
    # 1. Создаем модель
    model = create_htm_model()
    model.enableInference({"predictedField": "value"})
    
    # 2. Генерируем синтетические данные
    data = generate_synthetic_data(500)
    
    # 3. Обучаем модель и делаем предсказания
    print("Начало обучения и предсказаний...")
    actuals, predictions = train_and_predict(model, data)
    
    # 4. Оцениваем качество модели
    calculate_metrics(actuals, predictions)

if __name__ == "__main__":
    main()
